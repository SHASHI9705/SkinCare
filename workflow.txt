🔹 Skin Analyzer - Complete Workflow
🔹 Website Sections
1️⃣ Welcome Page → User Registration & Login
2️⃣ Preventions Section → Skincare & Disease Prevention Info
3️⃣ Online Cure Section → AI-Based Skin Analysis & Recommendations
4️⃣ Book Appointment Section → Find Nearby Dermatologists

1️⃣ Welcome Page (User Registration & Login)
🔹 User Actions:
✅ New users sign up with details like name, age, gender, skin type, allergies.
✅ Existing users log in to access features.
✅ Authenticated via AWS Cognito.

🔹 Tech Stack:
📌 Frontend → EJS + Bootstrap/TailwindCSS
📌 Backend → Node.js + Express.js
📌 Database → MongoDB Atlas (stores user details)
📌 Auth → AWS Cognito

2️⃣ Preventions Section (Skincare & Disease Prevention Info)
🔹 User Actions:
✅ Users can browse prevention guides for various skin diseases.
✅ The page displays disease info, causes, preventive measures, skincare tips.

🔹 Tech Stack:
📌 Frontend → EJS (Server-Side Rendering)
📌 Backend → Node.js + Express.js (Fetch & Serve Data)
📌 Database → MongoDB (Stores Prevention Articles)

3️⃣ Online Cure Section (AI-Based Skin Analysis & Treatment Suggestions)
🔹 User Actions:
✅ User uploads a skin image 📸 (Stored in AWS S3)
✅ User enters symptoms (e.g., irritation, rash, acne, etc.)
✅ AI analyzes the image + symptoms using TensorFlow on AWS SageMaker
✅ AI returns:

Detected Disease (e.g., acne, eczema, psoriasis)
Severity Level (Mild / Moderate / Severe)
Suggested Treatments (OTC meds, skincare routines, dermatologist recommendations)
🔹 Tech Stack:
📌 Frontend → EJS (Image Upload & Form Submission UI)
📌 Backend → Node.js + Express.js (Handles Image & User Data)
📌 AI Model → Python + TensorFlow (Runs on AWS SageMaker)
📌 Cloud Storage → AWS S3 (Stores User Images)
📌 Database → MongoDB Atlas (Stores Analysis History)

4️⃣ Book Appointment Section (Find Nearby Dermatologists)
🔹 User Actions:
✅ User enters skin issue (e.g., "Severe Acne")
✅ AI fetches a list of nearby dermatologists 🏥
✅ Uses Google Maps API to filter doctors based on location
✅ User books an appointment via a third-party API (e.g., Practo, Zocdoc)

🔹 Tech Stack:
📌 Frontend → EJS (Displays Doctor List & Booking Form)
📌 Backend → Node.js + Express.js (Fetches Doctor List & Handles Booking)
📌 Location API → Google Maps API (Finds Nearby Doctors)
📌 Database → MongoDB (Stores Bookings & Doctor Data)
📌 AI Model → TensorFlow (Matches Symptoms with Best Specialists)

🔹 Complete Tech Stack
Frontend (UI & Templating)
✅ EJS + Bootstrap/TailwindCSS (For rendering pages dynamically)

Backend & API Handling
✅ Node.js + Express.js (For routing, handling image uploads, and AI integration)

AI Model & Processing
✅ Python + TensorFlow (AWS SageMaker) (For analyzing skin images & predicting diseases)

Cloud Storage & Database
✅ AWS S3 (For storing skin images)
✅ MongoDB Atlas (On AWS) (For storing user profiles, analysis history, and doctor data)

Authentication & Security
✅ AWS Cognito (For user authentication)

APIs & External Services
✅ Google Maps API (For finding nearby doctors)
✅ Practo / Zocdoc API (For appointment booking)

🔹 Next Steps
📌 Set up MongoDB Atlas & AWS services
📌 Develop Express.js routes for user authentication & data storage
📌 Train & deploy AI model on AWS SageMaker
📌 Build EJS-based UI for each section
📌 Integrate Google Maps API for finding dermatologists



1st setup for the welcome page:
/skin-analyzer
│── /public
│    ├── /css
│    │    ├── styles.css
│    ├── /images
│── /views
│    ├── welcome.ejs  <-- UI for the Welcome Page
│    ├── register.ejs  <-- UI for Registration Form
│    ├── login.ejs  <-- UI for Login Form
│── /routes
│    ├── authRoutes.js <-- Handles Authentication
│── /models
│    ├── User.js  <-- MongoDB User Schema
│── /config
│    ├── awsConfig.js <-- AWS Cognito Config
│── server.js  <-- Main Server File
│── package.json
│── .env
